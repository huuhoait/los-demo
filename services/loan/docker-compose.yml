services:
  # PostgreSQL Database
  postgres:
    image: postgres:14.2
    container_name: postgres
    environment:
      - POSTGRES_DB=loan_service
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql
      - ./init-conductor-db.sql:/docker-entrypoint-initdb.d/02-init-conductor-db.sql
      - ./init-decision-engine-db.sql:/docker-entrypoint-initdb.d/03-init-decision-engine-db.sql
    networks:
      - loan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d loan_service"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - loan-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

    # Netflix Conductor Server
  conductor-server:
    image: orkesio/orkes-conductor-community:latest
    container_name: loan-conductor-server
    environment:
      - spring.datasource.url=jdbc:postgresql://postgres:5432/postgres
      - spring.datasource.username=postgres
      - spring.datasource.password=password

      - conductor.redis-lock.serverAddress=redis://redis:6379
      - conductor.redis.hosts=redis:6379:redis
      - conductor.queue.type=redis_standalone
      - conductor.db.type=redis_standalone
    ports:
      - "8082:8080"
      - "8083:5000"
    volumes:
      - conductor_data:/app/data
      #- ./workflows/conductor.properties:/app/config/conductor.properties:ro
      #- ./workflows/config.properties:/app/config/config.properties:ro
    networks:
      - loan-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 20s
      timeout: 15s
      retries: 5
      start_period: 40s



  # Loan Service
  loan:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: loan-service
    ports:
      - "8081:8080"
    environment:
      # Environment
      - APP_ENV=docker
      
      # Server configuration
      - PORT=8080
      - HOST=0.0.0.0
      - READ_TIMEOUT=30
      - WRITE_TIMEOUT=30
      
      # Database configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=loan_service
      - DB_SSLMODE=disable
      
      # Conductor configuration
      - CONDUCTOR_BASE_URL=http://conductor-server:8080
      - CONDUCTOR_TIMEOUT=30
      
      # Decision Engine configuration
      - DECISION_ENGINE_URL=http://decision-engine:8080
      - DECISION_ENGINE_TIMEOUT=30
      
      # Logging
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      
      # Security
      - JWT_SECRET=docker-secret-key-change-in-production
      
      # Feature flags
      - ENABLE_DECISION_ENGINE=true
      - ENABLE_CONDUCTOR_WORKFLOWS=true
      - ENABLE_MOCK_DATA=true
    volumes:
      - ./config:/app/config:ro
      - ./workflows:/app/workflows:ro
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - loan-network

networks:
  loan-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  conductor_data:
    driver: local
